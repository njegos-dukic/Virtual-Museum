package org.unibl.etf.virtualmuseum.services;

import org.unibl.etf.virtualmuseum.services.utils.ConnectionPool;

public class MuseumService {
	
	private static ConnectionPool connectionPool = ConnectionPool.getConnectionPool();
	private static final String SQL_SELECT_ALL = "SELECT * FROM book";
	private static final String SQL_SELECT_ONE = "SELECT * FROM book WHERE id=?";
	private static final String SQL_INSERT = "INSERT INTO book (author, title, publisher, year, isbn) VALUES (?, ?, ?, ?, ?)";
	private static final String SQL_UPDATE = "UPDATE book set author=?, title=?, publisher=?, year=?, isbn=? WHERE id = ?";

	
	public static ArrayList<Book> selectAll(){
		ArrayList<Book> retVal = new ArrayList<Book>();
		Connection connection = null;
		ResultSet rs = null;
		Object values[] = {};
		try {
			connection = connectionPool.checkOut();
			PreparedStatement pstmt = DAOUtil.prepareStatement(connection,
					SQL_SELECT_ALL, false, values);
			rs = pstmt.executeQuery();
			while (rs.next()){
				retVal.add(new Book(rs.getInt("id"), rs.getString("author"), rs.getString("title"), rs.getString("publisher"), rs.getInt("year"),rs.getString("isbn")));
			}
			pstmt.close();
		} catch (SQLException exp) {
			exp.printStackTrace();
		} finally {
			connectionPool.checkIn(connection);
		}
		return retVal;
	}
	
	public static Book selectOne(Book book){
		Book retVal = null;
		Connection connection = null;
		ResultSet rs = null;
		Object values[] = {book.getId()};
		try {
			connection = connectionPool.checkOut();
			PreparedStatement pstmt = DAOUtil.prepareStatement(connection,
					SQL_SELECT_ONE, false, values);
			rs = pstmt.executeQuery();
			while (rs.next()){
				retVal = new Book(rs.getInt("id"), rs.getString("author"), rs.getString("title"), rs.getString("publisher"), rs.getInt("year"),rs.getString("isbn"));
			}
			pstmt.close();
		} catch (SQLException exp) {
			exp.printStackTrace();
		} finally {
			connectionPool.checkIn(connection);
		}
		return retVal;
	}
	
//	public static Book selectOneById(String id){
//		Book retVal = null;
//		Connection connection = null;
//		ResultSet rs = null;
//		try {
//			connection = connectionPool.checkOut();
//			Statement stmt = connection.createStatement();
//			stmt.execute("SELECT * FROM book WHERE id = " + id);
//			rs = stmt.getResultSet();
//			while (rs.next()){
//				retVal = new Book(rs.getInt("id"), rs.getString("author"), rs.getString("title"), rs.getString("publisher"), rs.getInt("year"),rs.getString("isbn"));
//			}
//			stmt.close();
//		} catch (SQLException exp) {
//			exp.printStackTrace();
//		} finally {
//			connectionPool.checkIn(connection);
//		}
//		return retVal;
//	}
	
	public static Book selectOneById(int id){
		Book retVal = null;
		Connection connection = null;
		ResultSet rs = null;
		Object values[] = {id};
		try {
			connection = connectionPool.checkOut();
			PreparedStatement pstmt = DAOUtil.prepareStatement(connection,
					SQL_SELECT_ONE, false, values);
			rs = pstmt.executeQuery();
			while (rs.next()){
				retVal = new Book(rs.getInt("id"), rs.getString("author"), rs.getString("title"), rs.getString("publisher"), rs.getInt("year"),rs.getString("isbn"));
			}
			pstmt.close();
		} catch (SQLException exp) {
			exp.printStackTrace();
		} finally {
			connectionPool.checkIn(connection);
		}
		return retVal;
	}

	public static boolean insert(Book book) {
		boolean retVal = false;
		Connection connection = null;
		ResultSet generatedKeys = null;
		Object values[] = { book.getAuthor(), book.getTitle(), book.getPublisher(), book.getYear(), book.getIsbn()};
		try {
			connection = connectionPool.checkOut();
			PreparedStatement pstmt = DAOUtil.prepareStatement(connection, SQL_INSERT, true,
					values);
			int affectedRows = pstmt.executeUpdate();
			if (affectedRows == 0)
				retVal = false;
			else
				retVal = true;
			generatedKeys = pstmt.getGeneratedKeys();
			if (generatedKeys.next())
				book.setId(generatedKeys.getInt(1));
			pstmt.close();
		} catch (SQLException e) {
			retVal = false;
		} finally {
			connectionPool.checkIn(connection);
		}
		return retVal;
	}

	public static boolean update(Book book) {
		boolean retVal = false;
		Connection connection = null;
		Object values[] = { book.getAuthor(), book.getTitle(), book.getPublisher(), book.getYear(), book.getIsbn(), book.getId()};
		try {
			connection = connectionPool.checkOut();
			PreparedStatement pstmt = DAOUtil.prepareStatement(connection, SQL_UPDATE, false,
					values);
			int affectedRows = pstmt.executeUpdate();
			if (affectedRows == 0)
				retVal = false;
			else
				retVal = true;
			pstmt.close();
		} catch (SQLException e) {
			retVal = false;
		} finally {
			connectionPool.checkIn(connection);
		}
		return retVal;
	}
}
